package org.scau.lzk.auto;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

import org.scau.lzk.Tool;

import application.MainScene;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.util.Duration;

public class ReceiveThread22 extends Thread{
	    Socket socket;
	    MainScene1 mainScene;
	    Timeline timeline;
		public ReceiveThread22(Socket socket, MainScene1 mainScene) {
			this.socket=socket;
			this.mainScene=mainScene;
		}
		@Override
		public void run(){
			System.out.println("主socket可连接");
			try {
				OutputStream outs=socket.getOutputStream();
				InputStream ins=socket.getInputStream();
				timeline=new Timeline();
				for(int i=0;i<9;i++){
					final int ii=i;
					timeline.getKeyFrames().add(new KeyFrame(Duration.millis(2000*(i+1)), event->{
						byte[] packet1;
						try {
							
							packet1 = Tool.getHexFromFile((ii+2)+".txt");
							Platform.runLater(()->{
								mainScene.showOnTip1("send "+(ii+2)+".txt");
							});
				            outs.write(packet1);
				            outs.flush(); 
						} catch (Exception e) {
							System.err.println("E:"+e);
							timeline.stop();
						}

					}));
				}
		    	 int count=0;
		    	 long time=System.currentTimeMillis();
		    	 long temp;
		    	 timeline.play();
		    	 while(true){
		    		 int c=ins.read();
		    		 if(c==-1) {
		    			 System.out.println("对方发送完毕");
		    			 break;
		    		 }
		    		 
		    		 temp=System.currentTimeMillis();
		    		 if(temp>time+2000) {
		    			 System.out.println("\nreceive count:"+count);
		    			 count=0;
		    		 }
		    		 time=temp;
		    		 if(count!=0&&count%16==0) System.out.println("");
		    		 else if(count!=0) System.out.print(" ");
		    		 if(count%16!=0&&count%8==0) System.out.print(" ");
		    		 System.out.printf("%02x",c);
		    		 count++;
		    	 }
			} catch (Exception e1) {
				System.err.println("E:"+e1);
				if(socket!=null&&!socket.isClosed()){
					try {
						socket.close();
					} catch (IOException e2) {
						
					}
				}
			}
			timeline.stop();
			System.out.println("主socket断开");
		     Platform.runLater(()->{
		    	try {
					mainScene.stop();
				} catch (IOException e) {
					 
				} 
		    });
		}
}

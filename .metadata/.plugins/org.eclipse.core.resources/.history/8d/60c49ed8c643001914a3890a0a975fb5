%% @author Administrator
%% @doc @todo Add description to homework.


-module(homework).

%% ====================================================================
%% API functions
%% ====================================================================
-export([main1/0,main2/0]).



%% ====================================================================
%% Internal functions
%% ====================================================================
odd_list1([X|T])->
	if 
		X rem 2=:=1->[X|odd_list1(T)];
		true ->odd_list1(T)
	end;
odd_list1([])->
	[].

odd_list2(L)->
	lists:filter(fun(X)->X rem 2=:=1 end, L).

odd_list3(L)->
	odd_list3(L,[]).
odd_list3([X|L],T) when X rem 2=:=1->
	odd_list3(L,[X|T]);
odd_list3([X|L],T)->
	odd_list3(L,T);
odd_list3([],T)->
	lists:reverse(T).

odd_list4([X|T])->
	case X rem 2 of
		1->[X|odd_list4(T)];
		_->odd_list4(T)
	end;
odd_list4([])->
    [].

odd_list5([X|_]=T)->
	odd_list5(X rem 2,T);
odd_list5(_)->[].
odd_list5(1,[X|T])->
	[X|odd_list5(T)];
odd_list5(_,[_|T])->odd_list5(T).

odd_list6([X|T])->
	try true=(X rem 2=:=1) of
        true->[X|odd_list6(T)]
    catch
		_:_->odd_list6(T)
	end;
odd_list6([])->
    [].


	
main1()->
   L = [1, 2, 3, 4, 5, 6, 7, 8, 9],
   odd_list6(L).


-record(item, {id, name, owner}).
list_to_record([X1,X2,X3])->
	#item{id=X1,name=X2,owner=X3}.

main2()->
	I=[3123, <<"XXX">>, <<"DDD">>],
    Item=list_to_record(I),
Item#item.name.

%% OTP框架中有几种behaviour?其中有哪一些你觉得比较了解？

%% 有4大behaviour，gen_server,gen_fsm,gen_event,supervisor
%% 课本主要介绍gen_server

%% handle_call/3 远程过程调用
%% handle_cast/2 实现播发,没有返回值的调用
%% handle_info/2处理自发性消息，即未显式调用前两者，但服务却得到的消息

%% erlang 是动态类型的语言，因而不能进行静态分析，所生成的文档也不包含有助于理解的类型信息
%% 总得来说:优点为方便阅读，清晰明了，缺点为不方便调试
%% Erlang的拥有GC垃圾回收机制，类似java的回收机制，但缺了mark过程
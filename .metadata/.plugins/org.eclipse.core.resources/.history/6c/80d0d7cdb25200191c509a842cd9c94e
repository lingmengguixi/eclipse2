%% @author Administrator
%% @doc @todo Add description to myChatServer2.


-module(myChatServer2).
-behaviour(gen_server).
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3,chatSendTo/3]).
-include("head1.hrl").

%% ====================================================================
%% API functions
%% ====================================================================
-export([addLoginNumber/1,addChatNumber/1,isUserExist/1,login/2,logout/1,start_link/0,stop/0,start_listen_process/0]).



%% ====================================================================
%% Behavioural functions
%% ====================================================================
-record(state, {}).

%% init/1
%% ====================================================================
%% @doc <a href="http://www.erlang.org/doc/man/gen_server.html#Module:init-1">gen_server:init/1</a>
-spec init(Args :: term()) -> Result when
	Result :: {ok, State}
			| {ok, State, Timeout}
			| {ok, State, hibernate}
			| {stop, Reason :: term()}
			| ignore,
	State :: term(),
	Timeout :: non_neg_integer() | infinity.
%% ====================================================================
init([]) ->
	%% io:format("I:the core server[~p] run~n",[self()]),
    ?SHOW("I:the core server[~p] run~n",[self()]),
	Dict=dict:new(),
	Ids=[1001,1002,1003,1004,1005],
	Names=["haha1","haha2","haha3","haha4","haha5"],
    {ok, store(Ids,Names,dict:new())}.

store([],_,Dict)->
	Dict;
store([X|T],[N1|T1],Dict)->
	Dict1=dict:store(X, #user{name=N1}, Dict),
	store(T,T1,Dict1).

%% handle_call/3
%% ====================================================================
%% @doc <a href="http://www.erlang.org/doc/man/gen_server.html#Module:handle_call-3">gen_server:handle_call/3</a>
-spec handle_call(Request :: term(), From :: {pid(), Tag :: term()}, State :: term()) -> Result when
	Result :: {reply, Reply, NewState}
			| {reply, Reply, NewState, Timeout}
			| {reply, Reply, NewState, hibernate}
			| {noreply, NewState}
			| {noreply, NewState, Timeout}
			| {noreply, NewState, hibernate}
			| {stop, Reason, Reply, NewState}
			| {stop, Reason, NewState},
	Reply :: term(),
	NewState :: term(),
	Timeout :: non_neg_integer() | infinity,
	Reason :: term().
%% ====================================================================
handle_call({addLoginNumber,Id}, From, Dict) ->
	Reply = ok,
	{ok,R}=dict:find(Id, Dict),
	{reply,Reply,Dict};
handle_call({listen_process,start},_From,Dict)->
	Reply=chatConnect:start_link(),
	{reply,Reply,Dict};
handle_call(stop,_From,Dict)->
	{stop, normal, Dict};
handle_call({login,Id,Password},_From,Dict)->
	Ans=dict:find(Id, Dict),
	case Ans of
		{ok,User} when User#user.passwd =:= Password->
			      Reply= <<201,1>>;
         _      ->Reply= <<201,0>>
    end,
	{reply,Reply,Dict};
handle_call({add,Pid},_From,Dict)->
	Reply=monitor(process,Pid),
	{reply,Reply,Dict};
handle_call(Request, From, State) ->
    Reply = ok,
    {reply, Reply, State}.


%% handle_cast/2
%% ====================================================================
%% @doc <a href="http://www.erlang.org/doc/man/gen_server.html#Module:handle_cast-2">gen_server:handle_cast/2</a>
-spec handle_cast(Request :: term(), State :: term()) -> Result when
	Result :: {noreply, NewState}
			| {noreply, NewState, Timeout}
			| {noreply, NewState, hibernate}
			| {stop, Reason :: term(), NewState},
	NewState :: term(),
	Timeout :: non_neg_integer() | infinity.
%% ====================================================================
handle_cast(Msg, State) ->
    {noreply, State}.


%% handle_info/2
%% ====================================================================
%% @doc <a href="http://www.erlang.org/doc/man/gen_server.html#Module:handle_info-2">gen_server:handle_info/2</a>
-spec handle_info(Info :: timeout | term(), State :: term()) -> Result when
	Result :: {noreply, NewState}
			| {noreply, NewState, Timeout}
			| {noreply, NewState, hibernate}
			| {stop, Reason :: term(), NewState},
	NewState :: term(),
	Timeout :: non_neg_integer() | infinity.
%% ====================================================================
handle_info(Info, State) ->
    {noreply, State}.


%% terminate/2
%% ====================================================================
%% @doc <a href="http://www.erlang.org/doc/man/gen_server.html#Module:terminate-2">gen_server:terminate/2</a>
-spec terminate(Reason, State :: term()) -> Any :: term() when
	Reason :: normal
			| shutdown
			| {shutdown, term()}
			| term().
%% ====================================================================
terminate(Reason, State) ->
	?SHOW("I:the core server stop!"),
    ok.


%% code_change/3
%% ====================================================================
%% @doc <a href="http://www.erlang.org/doc/man/gen_server.html#Module:code_change-3">gen_server:code_change/3</a>
-spec code_change(OldVsn, State :: term(), Extra :: term()) -> Result when
	Result :: {ok, NewState :: term()} | {error, Reason :: term()},
	OldVsn :: Vsn | {down, Vsn},
	Vsn :: term().
%% ====================================================================
code_change(OldVsn, State, Extra) ->
    {ok, State}.


%% ====================================================================
%% Internal functions
%% ====================================================================


addLoginNumber(Id)->
   gen_server:call(?SERVERNAME, {addLoginNumber,Id}).

addChatNumber(Id)->
   gen_server:call(?SERVERNAME, {addChatNumber,Id}).

isUserExist(Id)->
   gen_server:call(?SERVERNAME, {isUserExist,Id}).

login(Id,Password)->
  gen_server:call(?SERVERNAME, {login,Id,Password}).

logout(Id)->
  gen_server:call(?SERVERNAME, {logout,Id}).

chatSendTo(From,To,Msg)->
  gen_server:call(?SERVERNAME, {chatSendTo,From,To,Msg}).

start_listen_process()->
	gen_server:call(?SERVERNAME, {listen_process,start}).

start_link()->
  A=gen_server:start_link({local,?SERVERNAME}, ?SERVERMODULE, [], []),
  start_listen_process(),
  A.

newUserConnect(Pid)->
	gen_server:call(?SERVERNAME, {add,Pid}).

oldUserDisConnect(Pid)->
	gen_server:call(?SERVERNAME, {remove,Pid}).
	
stop()->
   gen_server:call(?SERVERNAME, stop).

